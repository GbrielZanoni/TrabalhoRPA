import streamlit as st
import pandas as pd
import os
import plotly.express as px
from datetime import datetime, date
from fpdf import FPDF
from io import BytesIO

st.set_page_config(page_title="Energral | Gest√£o Operacional", layout="wide")
st.title("üîß Painel Gerencial - Energral")

@st.cache_data
def carregar_dados():
    base = os.path.join(os.path.dirname(__file__), "csv")
    dados = {
        "inspe√ß√µes": pd.read_csv(os.path.join(base, "checklist_inspecoes.csv")),
        "equipamentos": pd.read_csv(os.path.join(base, "equipamentos_subestacoes.csv")),
        "tecnicos": pd.read_csv(os.path.join(base, "tecnicos_equipes.csv")),
        "alertas": pd.read_csv(os.path.join(base, "alertas_notificacoes.csv")),
    }
    for nome in dados:
        dados[nome].columns = (
            dados[nome]
            .columns.str.lower()
            .str.strip()
            .str.normalize("NFKD")
            .str.encode("ascii", errors="ignore")
            .str.decode("utf-8")
            .str.replace(" ", "_")
        )
    if "data_hora" in dados["alertas"].columns:
        dados["alertas"]["data_hora"] = pd.to_datetime(dados["alertas"]["data_hora"], errors="coerce")
    return dados

def gerar_pdf(titulo, df, extras):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, titulo, 0, 1, "C")
    pdf.set_font("Arial", "", 10)
    pdf.cell(0, 8, f"Gerado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}", 0, 1)
    pdf.ln(2)
    for linha in extras:
        pdf.cell(0, 6, linha, 0, 1)
    pdf.ln(4)
    for i, row in df.iterrows():
        texto = " | ".join(f"{col}: {row[col]}" for col in df.columns[:4])
        pdf.multi_cell(0, 6, texto, 0, 1)

    pdf_bytes = pdf.output(dest="S").encode("latin1")
    buffer = BytesIO(pdf_bytes)
    return buffer

dados = carregar_dados()

from datetime import date

with st.sidebar:
    st.markdown("## ‚ö° Energral")
    st.markdown("### üìä Painel de Gest√£o Operacional")
    st.markdown("---")

    aba = st.radio(
        "üìÅ Navega√ß√£o",
        ["Geral", "T√©cnicos", "Equipamentos", "Inspe√ß√µes", "Alertas", "Checklists PDF"]
    )

    st.markdown("---")
    st.markdown("üìÖ Hoje √©: **{}**".format(date.today().strftime("%d/%m/%Y")))
    st.caption("Desenvolvido pela equipe de RPA")

if aba == "Geral":
    st.subheader("üìå Vis√£o Geral")
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Inspe√ß√µes", len(dados["inspe√ß√µes"]))
    col2.metric("Equipamentos", len(dados["equipamentos"]))
    col3.metric("T√©cnicos", len(dados["tecnicos"]))
    col4.metric("Alertas", len(dados["alertas"]))
    st.markdown("---")

    st.markdown("""
    ## üè¢ Sobre o Projeto

    O **Painel Gerencial - Energral** √© uma aplica√ß√£o interativa desenvolvida para apoiar a tomada de decis√£o e a gest√£o operacional de uma empresa fict√≠cia do setor de energia el√©trica.

    A **Energral** √© uma companhia especializada na manuten√ß√£o e opera√ß√£o de subesta√ß√µes, linhas de transmiss√£o e sistemas de distribui√ß√£o de energia. O projeto simula o monitoramento de suas opera√ß√µes t√©cnicas e administrativas, com base em dados reais ou simulados, incluindo inspe√ß√µes, equipes t√©cnicas, equipamentos instalados e alertas operacionais.

    Este painel foi desenvolvido como parte de uma atividade pr√°tica de RPA, com foco na coleta, an√°lise e visualiza√ß√£o de dados para fins operacionais e estrat√©gicos.

    ---
    ### üîç Funcionalidades do Painel

    - **Vis√£o Geral** com totais de inspe√ß√µes, equipamentos, t√©cnicos e alertas.
    - **An√°lise de T√©cnicos** com distribui√ß√£o por experi√™ncia e √°reas de atua√ß√£o.
    - **Invent√°rio de Equipamentos** com classifica√ß√£o por tipo.
    - **Hist√≥rico de Inspe√ß√µes** com crit√©rios de aprova√ß√£o e an√°lise de PDF de checklists.
    - **Alertas Operacionais** com evolu√ß√£o temporal e status.
    - **Leitura Autom√°tica de Checklists PDF**, com gr√°ficos e heatmaps de correla√ß√£o.

    ---
    ### üìä Sobre os Dados Apresentados

    - Os arquivos `.csv` utilizados simulam bases reais de opera√ß√£o da Energral.
    - Os arquivos `.pdf` representam relat√≥rios de inspe√ß√£o t√©cnica preenchidos por engenheiros e eletricistas em campo.
    - As colunas foram padronizadas para facilitar a an√°lise e visualiza√ß√£o.

    ---
    ### üë®‚Äçüíª Equipe de Desenvolvimento

    - Ana Julia ‚Äì [@4nanotfound](https://github.com/4nanotfound)  
    - Gabriel Zanoni ‚Äì [@GbrielZanoni](https://github.com/GbrielZanoni)  
    - Mateus Euz√©bio ‚Äì [@mateuseuz](https://github.com/mateuseuz)  
    - Gabriel Moura ‚Äì [@gmoura0](https://github.com/gmoura0)  
    - Jo√£o Gabriel ‚Äì [@JoaoGabFB](https://github.com/JoaoGabFB)  
    - Maria Delmonaco ‚Äì [@mariadelmonaco](https://github.com/mariadelmonaco)  

    """)

elif aba == "T√©cnicos":
    st.subheader("üë∑ Equipes T√©cnicas")
    df_tec = dados["tecnicos"]

    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Funcion√°rios", len(df_tec))

    niveis = df_tec["nivel_de_experiencia"].value_counts()
    col2.metric("J√∫nior", niveis.get("J√∫nior", 0))
    col3.metric("Pleno", niveis.get("Pleno", 0))
    col4.metric("S√™nior", niveis.get("S√™nior", 0))

    if "area_de_atuacao" in df_tec.columns:
        areas = df_tec["area_de_atuacao"].value_counts()
        colunas_areas = st.columns(len(areas))
        for col, (area, qtd) in zip(colunas_areas, areas.items()):
            col.metric(area, f"{qtd}")

        import plotly.express as px
        import pandas as pd

        radar_df = pd.DataFrame({
            "√Årea": areas.index,
            "Quantidade": areas.values
        })

        fig_radar = px.line_polar(
            radar_df,
            r="Quantidade",
            theta="√Årea",
            line_close=True,
            title="",
        )
        st.plotly_chart(fig_radar, use_container_width=True)

    st.subheader("üìã Dados Detalhados")
    st.dataframe(df_tec)
    if st.button("Gerar Relat√≥rio de T√©cnicos"):
        extras = [
            f"Total de funcion√°rios: {len(df_tec)}",
            f"Distribui√ß√£o de n√≠veis: {niveis.to_dict()}",
            f"√Åreas de atua√ß√£o: {areas.to_dict() if 'areas' in locals() else 'N/A'}",
        ]
        buffer = gerar_pdf("Relat√≥rio de T√©cnicos", df_tec, extras)
        st.download_button("Baixar PDF", buffer, file_name="relatorio_tecnicos.pdf", mime="application/pdf")

elif aba == "Equipamentos":
    st.subheader("üîå Equipamentos")
    df_eq = dados["equipamentos"]
    st.dataframe(df_eq)

    if "tipo" in df_eq.columns:
        tipo_counts = df_eq["tipo"].value_counts().reset_index()
        tipo_counts.columns = ["tipo", "quantidade"]
        fig = px.pie(tipo_counts, names="tipo", values="quantidade", title="Tipos de Equipamento")
        st.plotly_chart(fig, use_container_width=True)

    if {"localizacao", "tipo"}.issubset(df_eq.columns):
        st.subheader("üè≠ Concentra√ß√£o por Localiza√ß√£o e Tipo de Equipamento")
        agrupado = df_eq.groupby(["localizacao", "tipo"]).size().reset_index(name="quantidade")
        fig_bar = px.bar(
            agrupado,
            x="localizacao",
            y="quantidade",
            color="tipo",
            title="Distribui√ß√£o de Equipamentos por Localiza√ß√£o",
            barmode="group"
        )
        st.plotly_chart(fig_bar, use_container_width=True)
    if st.button("Gerar Relat√≥rio de Equipamentos"):
        extras = [
            f"Total de equipamentos: {len(df_eq)}",
            f"Tipos: {df_eq['tipo'].value_counts().to_dict()}",
            f"Pontos de instala√ß√£o: {df_eq['localizacao'].nunique()} locais",
        ]
        buffer = gerar_pdf("Relat√≥rio de Equipamentos", df_eq, extras)
        st.download_button("Baixar PDF", buffer, file_name="relatorio_equipamentos.pdf", mime="application/pdf")

elif aba == "Inspe√ß√µes":
    st.subheader("üìÑ Inspe√ß√µes Realizadas")
    df_insp = dados["inspe√ß√µes"]
    st.dataframe(df_insp)

    if "criterio_de_aprovacao" in df_insp.columns:
        criterio = df_insp["criterio_de_aprovacao"].value_counts().reset_index()
        criterio.columns = ["Crit√©rio", "Quantidade"]
        fig = px.bar(criterio, x="Crit√©rio", y="Quantidade", title="Distribui√ß√£o por Crit√©rio de Aprova√ß√£o")
        st.plotly_chart(fig, use_container_width=True)

    if {"item", "criterio_de_aprovacao"}.issubset(df_insp.columns):
        st.subheader("")
        heat_df = (
            df_insp.groupby(["item", "criterio_de_aprovacao"])
            .size()
            .reset_index(name="quantidade")
        )

        fig_heat = px.density_heatmap(
            heat_df,
            x="criterio_de_aprovacao",
            y="item",
            z="quantidade",
            color_continuous_scale="Reds",
            title="Frequ√™ncia de Crit√©rios por Item Inspecionado"
        )
        st.plotly_chart(fig_heat, use_container_width=True)
    if st.button("Gerar Relat√≥rio de Inspe√ß√µes"):
        extras = [
            f"Total de inspe√ß√µes: {len(df_insp)}",
            f"Crit√©rios de aprova√ß√£o: {criterio.set_index('Crit√©rio')['Quantidade'].to_dict() if 'criterio' in locals() else 'N/A'}",
        ]
        buffer = gerar_pdf("Relat√≥rio de Inspe√ß√µes", df_insp, extras)
        st.download_button("Baixar PDF", buffer, file_name="relatorio_inspecoes.pdf", mime="application/pdf")

elif aba == "Alertas":
    st.subheader("üö® Alertas e Notifica√ß√µes")

    df_alertas = dados["alertas"].copy()

    if "data/hora" in df_alertas.columns:
        df_alertas["data/hora"] = pd.to_datetime(df_alertas["data/hora"], errors="coerce")
        df_alertas = df_alertas.dropna(subset=["data/hora"])
        df_alertas["data"] = df_alertas["data/hora"].dt.date

    st.dataframe(df_alertas)

    if "status" in df_alertas.columns and not df_alertas.empty:
        status_count = df_alertas["status"].value_counts().reset_index()
        status_count.columns = ["status", "quantidade"]

        mapa_cores_alerta = {
            "Lido": "orange",
            "Pendente": "red",
            "Resolvido": "blue"
        }

        fig = px.bar(
            status_count,
            x="status",
            y="quantidade",
            color="status",
            color_discrete_map=mapa_cores_alerta,
            title="Alertas por Status"
        )
        st.plotly_chart(fig, use_container_width=True)

    if "data/hora" in df_alertas.columns and not df_alertas.empty:
        fig2 = px.histogram(
            df_alertas,
            x="data/hora",
            nbins=30,
            title="Distribui√ß√£o Temporal dos Alertas"
        )
        st.plotly_chart(fig2, use_container_width=True)

    if "data" in df_alertas.columns and not df_alertas.empty:
        from streamlit_calendar import calendar

        eventos = [
            {
                "title": row.get("status", "Alerta"),
                "start": row["data"].isoformat()
            }
            for _, row in df_alertas.iterrows()
        ]

        opcoes = {
            "initialView": "dayGridMonth",
            "headerToolbar": {
                "left": "prev,next today",
                "center": "title",
                "right": ""
            },
            "locale": "pt-br"
        }

        st.subheader("üìÖ Calend√°rio de Alertas")
        calendar(eventos, options=opcoes, key="cal_alertas")
  
    if st.button("Gerar Relat√≥rio de Alertas"):
        extras = [
            f"Total de alertas: {len(df_alertas)}",
            f"Distribui√ß√£o de status: {df_alertas['status'].value_counts().to_dict()}",
        ]
        buffer = gerar_pdf("Relat√≥rio de Alertas", df_alertas, extras)
        st.download_button("Baixar PDF", buffer, file_name="relatorio_alertas.pdf", mime="application/pdf")

elif aba == "Checklists PDF":
    st.subheader("üìÇ Checklists em PDF")

    import PyPDF2

    pasta = os.path.join(os.path.dirname(__file__), "..", "checklist", "dist")
    arquivos = [f for f in os.listdir(pasta) if f.endswith(".pdf")]

    registros = []

    for nome in arquivos:
        caminho = os.path.join(pasta, nome)
        with open(caminho, "rb") as f:
            reader = PyPDF2.PdfReader(f)
            texto = ""
            for pagina in reader.pages:
                texto += pagina.extract_text() + "\n"

        def pega(campo):
            try:
                return texto.split(f"{campo}:")[1].split("\n")[0].strip()
            except:
                return "-"

        registros.append({
            "Arquivo": nome,
            "Data": pega("Data e Hora"),
            "Local": pega("Local da Subesta√ß√£o"),
            "T√©cnico": pega("Nome do T√©cnico"),
            "Tipo de Inspe√ß√£o": pega("Tipo de Inspe√ß√£o"),
            "Gravidade": pega("Gravidade"),
            "A√ß√£o Tomada": pega("A√ß√£o Tomada")
        })

    df = pd.DataFrame(registros)

    st.dataframe(df)

    if not df.empty:
        tipo = df["Tipo de Inspe√ß√£o"].value_counts().reset_index()
        tipo.columns = ["Tipo", "Quantidade"]
        st.plotly_chart(px.pie(tipo, names="Tipo", values="Quantidade", title="Distribui√ß√£o por Tipo de Inspe√ß√£o"), use_container_width=True)

        grav = df["Gravidade"].value_counts().reset_index()
        grav.columns = ["Gravidade", "Quantidade"]
        st.plotly_chart(px.bar(grav, x="Gravidade", y="Quantidade", title="Distribui√ß√£o por Gravidade"), use_container_width=True)

        tecnico = df["T√©cnico"].value_counts().reset_index()
        tecnico.columns = ["T√©cnico", "Total"]
        st.plotly_chart(px.bar(tecnico, x="T√©cnico", y="Total", title="Atua√ß√£o por T√©cnico"), use_container_width=True)

        acao = df["A√ß√£o Tomada"].value_counts().reset_index()
        acao.columns = ["A√ß√£o", "Qtd"]
        st.plotly_chart(px.pie(acao, names="A√ß√£o", values="Qtd", title="A√ß√µes Tomadas"), use_container_width=True)
    if not df.empty and st.button("Gerar Relat√≥rio de Checklists"):
        extras = [
            f"Total de checklists: {len(df)}",
            f"Tipos de inspe√ß√£o: {df['Tipo'].value_counts().to_dict()}",
            f"Gravidades: {df['Gravidade'].value_counts().to_dict()}",
        ]
        buffer = gerar_pdf("Relat√≥rio de Checklists", df, extras)
        st.download_button("Baixar PDF", buffer, file_name="relatorio_checklists.pdf", mime="application/pdf")
